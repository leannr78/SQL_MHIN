090820:083418 CCLPROT                       Cost25.52 Cpu 1.78 Ela144.29 Bio 820
Command executed!
  1)translate PTS_EXPIRE_PPR GO
..............^
%CCL-E-43-CCL(1,10)S0L1.0p5{PTS_EXPIRE_PPR}Could not execute program (PTS_EXPIR.
 PTS_EXPIRE_PPR 
Command not executed due to error!
  1)translate PTS_EXPIRE_PPR GO
..............^
%CCL-E-43-CCL(1,10)S0L1.0p5{PTS_EXPIRE_PPR}Could not execute program (PTS_EXPIRE_PPR) since it was not found in the object lib.
 PTS_EXPIRE_PPR 
Command not executed due to error!
  1)translate pts_expire_ppr go 
..............^
%CCL-E-43-CCL(1,10)S0L1.0p5{PTS_EXPIRE_PPR}Could not execute program (PTS_EXPIRE_PPR) since it was not found in the object lib.
 PTS_EXPIRE_PPR 
Command not executed due to error!
  1)set trace backdoor p30ins go
Command executed!
  1)translate pts_expire_ppr go
;*** Generated by translate command; please verify contents before re-including in CCL ***
DROP PROGRAM   PTS_EXPIRE_PPR : DBA  GO
CREATE PROGRAM  PTS_EXPIRE_PPR : DBA 

IF ( ( VALIDATE ( PM_CREATE_REQ_DEF ,  - ( 9 ))= - ( 9 )) ) 
DECLARE  PM_CREATE_REQ_DEF  =  I2  WITH  CONSTANT ( 0 )
DECLARE  CR_HMSG  =  I4  WITH  NOCONSTANT ( 0 )
DECLARE  CR_HMSGTYPE  =  I4  WITH  NOCONSTANT ( 0 )
DECLARE  CR_HINST  =  I4  WITH  NOCONSTANT ( 0 )
DECLARE  CR_HITEM  =  I4  WITH  NOCONSTANT ( 0 )
DECLARE  CR_LLEVEL  =  I4  WITH  NOCONSTANT ( 0 )
DECLARE  CR_LCNT  =  I4  WITH  NOCONSTANT ( 0 )
DECLARE  CR_LCHARLEN  =  I4  WITH  NOCONSTANT ( 0 )
DECLARE  CR_SITERATOR  =  I4  WITH  NOCONSTANT ( 0 )
DECLARE  CR_LFIELDTYPE  =  I4  WITH  NOCONSTANT ( 0 )
DECLARE  CR_SFIELDNAME  =  VC  WITH  NOCONSTANT ( " " )
DECLARE  CR_BLIST  =  I2  WITH  NOCONSTANT ( FALSE )
DECLARE  CR_BFOUND  =  I2  WITH  NOCONSTANT ( FALSE )
DECLARE  CR_ESRVSTRING  =  I4  WITH  CONSTANT ( 1 )
DECLARE  CR_ESRVSHORT  =  I4  WITH  CONSTANT ( 2 )
DECLARE  CR_ESRVLONG  =  I4  WITH  CONSTANT ( 3 )
DECLARE  CR_ESRVDOUBLE  =  I4  WITH  CONSTANT ( 6 )
DECLARE  CR_ESRVASIS  =  I4  WITH  CONSTANT ( 7 )
DECLARE  CR_ESRVLIST  =  I4  WITH  CONSTANT ( 8 )
DECLARE  CR_ESRVSTRUCT  =  I4  WITH  CONSTANT ( 9 )
DECLARE  CR_ESRVUCHAR  =  I4  WITH  CONSTANT ( 10 )
DECLARE  CR_ESRVULONG  =  I4  WITH  CONSTANT ( 12 )
DECLARE  CR_ESRVDATE  =  I4  WITH  CONSTANT ( 13 )
DECLARE  CR_CREATEREQUEST (( MODE = I2 ), ( REQ_ID = I4 ), ( REQ_NAME = VC )) =  I2 
DECLARE  CR_POPSTACK (( DUMMYVAR = I2 )) =  NULL 
DECLARE  CR_PUSHSTACK (( HVAL = I4 ), ( SVAL = I4 )) =  NULL 
FREE RECORD CR_STACK 
RECORD  CR_STACK  (
 1  LIST [ 10 ] 
 2  HINST  =  I4 
 2  SITERATOR  =  I4 )
SUBROUTINE   CR_CREATEREQUEST  ( MODE ,  REQ_ID ,  REQ_NAME  )

SET  CR_LLEVEL  =  1 
 CALL DQ_RESET_QUERY ( NULL )
 CALL DQ_ADD_LINE ( CONCAT ( "free record " ,  REQ_NAME ,  " go" ))
 CALL DQ_ADD_LINE ( CONCAT ( "record " ,  REQ_NAME ))
 CALL DQ_ADD_LINE ( "(" )
SET  CR_HMSG  =  UAR_SRVSELECTMESSAGE ( REQ_ID )
IF ( ( CR_HMSG != 0 ) ) 
IF ( ( MODE = 0 ) ) 
SET  CR_HINST  =  UAR_SRVCREATEREQUEST ( CR_HMSG )
ELSE  
SET  CR_HINST  =  UAR_SRVCREATEREPLY ( CR_HMSG )
ENDIF

ELSE  
SET  REPLY -> STATUS_DATA -> OPERATIONNAME  =  "INVALID_hMsg" 
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> TARGETOBJECTNAME  =  "CREATE_REQUEST" 
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> TARGETOBJECTVALUE  =  "GET"  RETURN ( FALSE )

ENDIF

IF ( ( CR_HINST > 0 ) ) 
SET  CR_SFIELDNAME  =  UAR_SRVFIRSTFIELD ( CR_HINST ,  CR_SITERATOR )
SET  CR_SFIELDNAME  =  TRIM ( CR_SFIELDNAME ,  3 )
 CALL CR_PUSHSTACK ( CR_HINST ,  CR_SITERATOR )
ELSE  
SET  REPLY -> STATUS_DATA -> OPERATIONNAME  =  "INVALID_hInst" 
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> TARGETOBJECTNAME  =  "CREATE_REQUEST" 
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> TARGETOBJECTVALUE  =  "GET" 
IF (  CR_HINST  ) 
 CALL UAR_SRVDESTROYINSTANCE ( CR_HINST )
SET  CR_HINST  =  0 
ENDIF
 RETURN ( FALSE )

ENDIF

WHILE ( ( TEXTLEN ( CR_SFIELDNAME )> 0 ))

SET  CR_LFIELDTYPE  =  UAR_SRVGETTYPE ( CR_STACK -> LIST [ CR_LCNT ]-> HINST ,  NULLTERM (
 CR_SFIELDNAME ))
CASE (  CR_LFIELDTYPE  )
 OF  CR_ESRVSTRUCT : 
SET  CR_HITEM  =  0 
SET  CR_HITEM  =  UAR_SRVGETSTRUCT ( CR_STACK -> LIST [ CR_LCNT ]-> HINST ,  NULLTERM (
 CR_SFIELDNAME ))
IF ( ( CR_HITEM > 0 ) ) 
SET  CR_SITERATOR  =  0 
 CALL CR_PUSHSTACK ( CR_HITEM ,  CR_SITERATOR )
 CALL DQ_ADD_LINE ( CONCAT ( CNVTSTRING ( CR_LLEVEL ),  " " ,  CR_SFIELDNAME ))
SET  CR_LLEVEL  = ( CR_LLEVEL + 1 )
SET  CR_BLIST  =  TRUE 
ELSE  
SET  REPLY -> STATUS_DATA -> OPERATIONNAME  =  "INVALID_hItem" 
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> TARGETOBJECTNAME  =  "CREATE_REQUEST" 
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> TARGETOBJECTVALUE  =  "GET" 
IF (  CR_HINST  ) 
 CALL UAR_SRVDESTROYINSTANCE ( CR_HINST )
SET  CR_HINST  =  0 
ENDIF
 RETURN ( FALSE )

ENDIF

 OF  CR_ESRVLIST : 
SET  CR_HITEM  =  0 
SET  CR_HITEM  =  UAR_SRVADDITEM ( CR_STACK -> LIST [ CR_LCNT ]-> HINST ,  NULLTERM ( CR_SFIELDNAME 
))
IF ( ( CR_HITEM > 0 ) ) 
SET  CR_SITERATOR  =  0 
 CALL CR_PUSHSTACK ( CR_HITEM ,  CR_SITERATOR )
 CALL DQ_ADD_LINE ( CONCAT ( CNVTSTRING ( CR_LLEVEL ),  " " ,  CR_SFIELDNAME ,  "[*]" ))
SET  CR_LLEVEL  = ( CR_LLEVEL + 1 )
SET  CR_BLIST  =  TRUE 
ELSE  
SET  REPLY -> STATUS_DATA -> OPERATIONNAME  =  "INVALID_hInst" 
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> TARGETOBJECTNAME  =  "CREATE_REQUEST" 
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> TARGETOBJECTVALUE  =  "GET" 
IF (  CR_HINST  ) 
 CALL UAR_SRVDESTROYINSTANCE ( CR_HINST )
SET  CR_HINST  =  0 
ENDIF
 RETURN ( FALSE )

ENDIF

 OF  CR_ESRVSTRING : 
SET  CR_LCHARLEN  =  UAR_SRVGETSTRINGMAX ( CR_STACK -> LIST [ CR_LCNT ]-> HINST ,  NULLTERM (
 CR_SFIELDNAME ))
IF ( ( CR_LCHARLEN > 0 ) ) 
 CALL DQ_ADD_LINE ( CONCAT ( CNVTSTRING ( CR_LLEVEL ),  " " ,  CR_SFIELDNAME ,  " = c" , 
 CNVTSTRING ( CR_LCHARLEN )))
ELSE  
 CALL DQ_ADD_LINE ( CONCAT ( CNVTSTRING ( CR_LLEVEL ),  " " ,  CR_SFIELDNAME ,  " = vc" ))
ENDIF

 OF  CR_ESRVUCHAR : 
 CALL DQ_ADD_LINE ( CONCAT ( CNVTSTRING ( CR_LLEVEL ),  " " ,  CR_SFIELDNAME ,  " = c1" ))
 OF  CR_ESRVSHORT : 
 CALL DQ_ADD_LINE ( CONCAT ( CNVTSTRING ( CR_LLEVEL ),  " " ,  CR_SFIELDNAME ,  " = i2" ))
 OF  CR_ESRVLONG : 
 CALL DQ_ADD_LINE ( CONCAT ( CNVTSTRING ( CR_LLEVEL ),  " " ,  CR_SFIELDNAME ,  " = i4" ))
 OF  CR_ESRVULONG : 
 CALL DQ_ADD_LINE ( CONCAT ( CNVTSTRING ( CR_LLEVEL ),  " " ,  CR_SFIELDNAME ,  " = ui4" ))
 OF  CR_ESRVDOUBLE : 
 CALL DQ_ADD_LINE ( CONCAT ( CNVTSTRING ( CR_LLEVEL ),  " " ,  CR_SFIELDNAME ,  " = f8" ))
 OF  CR_ESRVDATE : 
 CALL DQ_ADD_LINE ( CONCAT ( CNVTSTRING ( CR_LLEVEL ),  " " ,  CR_SFIELDNAME ,  " = dq8" ))
 OF  CR_ESRVASIS : 
 CALL DQ_ADD_LINE ( CONCAT ( CNVTSTRING ( CR_LLEVEL ),  " " ,  CR_SFIELDNAME ,  " = gvc" ))
 ELSE 
SET  REPLY -> STATUS_DATA -> OPERATIONNAME  =  "INVALID_SrvType" 
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> TARGETOBJECTNAME  =  "CREATE_REQUEST" 
SET  REPLY -> STATUS_DATA -> SUBEVENTSTATUS [ 1 ]-> TARGETOBJECTVALUE  =  "GET" 
IF (  CR_HINST  ) 
 CALL UAR_SRVDESTROYINSTANCE ( CR_HINST )
SET  CR_HINST  =  0 
ENDIF
,
 RETURN ( FALSE )

 ENDCASE 

SET  CR_SFIELDNAME  =  "" 
IF (  CR_BLIST  ) 
SET  CR_SFIELDNAME  =  UAR_SRVFIRSTFIELD ( CR_STACK -> LIST [ CR_LCNT ]-> HINST ,  CR_STACK -> LIST 
[ CR_LCNT ]-> SITERATOR )
SET  CR_SFIELDNAME  =  TRIM ( CR_SFIELDNAME ,  3 )
SET  CR_BLIST  =  FALSE 
ELSE  
SET  CR_SFIELDNAME  =  UAR_SRVNEXTFIELD ( CR_STACK -> LIST [ CR_LCNT ]-> HINST ,  CR_STACK -> LIST [
 CR_LCNT ]-> SITERATOR )
SET  CR_SFIELDNAME  =  TRIM ( CR_SFIELDNAME ,  3 )
IF ( ( TEXTLEN ( CR_SFIELDNAME )<= 0 ) ) 
SET  CR_BFOUND  =  FALSE 
WHILE ( ( CR_BFOUND != TRUE ))

 CALL CR_POPSTACK ( NULL )
IF ( ( CR_STACK -> LIST [ CR_LCNT ]-> HINST > 0 ) AND ( CR_LCNT > 0 ) ) 
SET  CR_SFIELDNAME  =  UAR_SRVNEXTFIELD ( CR_STACK -> LIST [ CR_LCNT ]-> HINST ,  CR_STACK -> LIST [
 CR_LCNT ]-> SITERATOR )
SET  CR_SFIELDNAME  =  TRIM ( CR_SFIELDNAME ,  3 )
ELSE  
SET  CR_BFOUND  =  TRUE 
ENDIF

IF ( ( TEXTLEN ( CR_SFIELDNAME )> 0 ) ) 
SET  CR_BFOUND  =  TRUE 
ENDIF


ENDWHILE

ENDIF

ENDIF


ENDWHILE

IF ( ( MODE = 1 ) ) 
 CALL DQ_ADD_LINE ( "1  status_data" )
 CALL DQ_ADD_LINE ( "2  status  = c1" )
 CALL DQ_ADD_LINE ( "2  subeventstatus[1]" )
 CALL DQ_ADD_LINE ( "3  operationname = c15" )
 CALL DQ_ADD_LINE ( "3  operationstatus = c1" )
 CALL DQ_ADD_LINE ( "3  targetobjectname = c15" )
 CALL DQ_ADD_LINE ( "3  targetobjectvalue = vc" )
ENDIF

 CALL DQ_ADD_LINE ( ")  with persistscript" )
 CALL DQ_END_QUERY ( NULL )
 CALL DQ_EXECUTE ( NULL )
IF (  CR_HINST  ) 
 CALL UAR_SRVDESTROYINSTANCE ( CR_HINST )
SET  CR_HINST  =  0 
ENDIF
 RETURN ( TRUE )


END ;Subroutine

SUBROUTINE   CR_POPSTACK  ( DUMMYVAR  )

SET  CR_LCNT  = ( CR_LCNT - 1 )
SET  CR_LLEVEL  = ( CR_LLEVEL - 1 )

END ;Subroutine

SUBROUTINE   CR_PUSHSTACK  ( HVAL ,  LVAL  )

SET  CR_LCNT  = ( CR_LCNT + 1 )
IF ( ( MOD ( CR_LCNT ,  10 )= 1 ) AND ( CR_LCNT != 1 ) ) 
SET  STAT  =  ALTERLIST ( CR_STACK -> LIST , ( CR_LCNT + 9 ))
ENDIF

SET  CR_STACK -> LIST [ CR_LCNT ]-> HINST  =  HVAL 
SET  CR_STACK -> LIST [ CR_LCNT ]-> SITERATOR  =  LVAL 

END ;Subroutine

ENDIF


IF ( ( VALIDATE ( DQ_PARSER_REC -> BUFFER_COUNT ,  - ( 99 ))= - ( 99 )) ) 
 CALL ECHO ( "*****inside pm_dynamic_query include file *****" )
FREE RECORD DQ_PARSER_REC 
RECORD  DQ_PARSER_REC  (
 1  BUFFER_COUNT  =  I2 
 1  PLAN_COUNT  =  I2 
 1  SET_COUNT  =  I2 
 1  TABLE_COUNT  =  I2 
 1  WITH_COUNT  =  I2 
 1  BUFFER [*] 
 2  LINE  =  VC )
SET  DQ_PARSER_REC -> BUFFER_COUNT  =  0 
SET  DQ_PARSER_REC -> PLAN_COUNT  =  0 
SET  DQ_PARSER_REC -> SET_COUNT  =  0 
SET  DQ_PARSER_REC -> TABLE_COUNT  =  0 
SET  DQ_PARSER_REC -> WITH_COUNT  =  0 
DECLARE  DQ_ADD_DETAIL ( DQAD_DUMMY ) =  NULL 
DECLARE  DQ_ADD_FOOTER ( DQAF_TARGET ) =  NULL 
DECLARE  DQ_ADD_HEADER ( DQAH_TARGET ) =  NULL 
DECLARE  DQ_ADD_LINE ( DQAL_LINE ) =  NULL 
DECLARE  DQ_GET_LINE ( DQGL_IDX ) =  VC 
DECLARE  DQ_UPT_LINE ( DQUL_IDX ,  DQUL_LINE ) =  NULL 
DECLARE  DQ_ADD_PLANJOIN ( DQAP_RANGE ) =  NULL 
DECLARE  DQ_ADD_SET ( DQAS_TO ,  DQAS_FROM ) =  NULL 
DECLARE  DQ_ADD_TABLE ( DQAT_TABLE_NAME ,  DQAT_TABLE_ALIAS ) =  NULL 
DECLARE  DQ_ADD_WITH ( DQAW_CONTROL_OPTION ) =  NULL 
DECLARE  DQ_BEGIN_INSERT ( DQBI_DUMMY ) =  NULL 
DECLARE  DQ_BEGIN_SELECT ( DQBS_DISTINCT_IND ,  DQBS_OUTPUT_DEVICE ) =  NULL 
DECLARE  DQ_BEGIN_UPDATE ( DQBU_DUMMY ) =  NULL 
DECLARE  DQ_ECHO_QUERY ( DQEQ_LEVEL ) =  NULL 
DECLARE  DQ_END_QUERY ( DQES_DUMMY ) =  NULL 
DECLARE  DQ_EXECUTE ( DQE_RESET ) =  NULL 
DECLARE  DQ_RESET_QUERY ( DQRB_DUMMY ) =  NULL 
SUBROUTINE   DQ_ADD_DETAIL  ( DQAD_DUMMY  )

 CALL DQ_ADD_LINE ( "detail" )

END ;Subroutine

SUBROUTINE   DQ_ADD_FOOTER  ( DQAF_TARGET  )

IF ( ( SIZE ( TRIM ( DQAF_TARGET ),  1 )> 0 ) ) 
 CALL DQ_ADD_LINE ( CONCAT ( "foot " ,  DQAF_TARGET ))
ELSE  
 CALL DQ_ADD_LINE ( "foot report" )
ENDIF


END ;Subroutine

SUBROUTINE   DQ_ADD_HEADER  ( DQAH_TARGET  )

IF ( ( SIZE ( TRIM ( DQAH_TARGET ),  1 )> 0 ) ) 
 CALL DQ_ADD_LINE ( CONCAT ( "head " ,  DQAH_TARGET ))
ELSE  
 CALL DQ_ADD_LINE ( "head report" )
ENDIF


END ;Subroutine

SUBROUTINE   DQ_ADD_LINE  ( DQAL_LINE  )

SET  DQ_PARSER_REC -> BUFFER_COUNT  = ( DQ_PARSER_REC -> BUFFER_COUNT + 1 )
IF ( ( MOD ( DQ_PARSER_REC -> BUFFER_COUNT ,  10 )= 1 ) ) 
SET  STAT  =  ALTERLIST ( DQ_PARSER_REC -> BUFFER , ( DQ_PARSER_REC -> BUFFER_COUNT + 9 ))
ENDIF

SET  DQ_PARSER_REC -> BUFFER [ DQ_PARSER_REC -> BUFFER_COUNT ]-> LINE  =  TRIM ( DQAL_LINE ,  3 )

END ;Subroutine

SUBROUTINE   DQ_GET_LINE  ( DQGL_IDX  )

IF ( ( DQGL_IDX > 0 ) AND ( DQGL_IDX <= SIZE ( DQ_PARSER_REC -> BUFFER ,  5 )) )  RETURN (
 DQ_PARSER_REC -> BUFFER [ DQGL_IDX ]-> LINE )

ENDIF


END ;Subroutine

SUBROUTINE   DQ_UPT_LINE  ( DQUL_IDX ,  DQUL_LINE  )

IF ( ( DQUL_IDX > 0 ) AND ( DQUL_IDX <= SIZE ( DQ_PARSER_REC -> BUFFER ,  5 )) ) 
SET  DQ_PARSER_REC -> BUFFER [ DQUL_IDX ]-> LINE  =  DQUL_LINE 
ENDIF


END ;Subroutine

SUBROUTINE   DQ_ADD_PLANJOIN  ( DQAP_RANGE  )

DECLARE  DQAP_STR  =  VC  WITH  PRIVATE , NOCONSTANT ( " " )
IF ( ( DQ_PARSER_REC -> PLAN_COUNT > 0 ) ) 
SET  DQAP_STR  =  "join" 
ELSE  
SET  DQAP_STR  =  "plan" 
ENDIF

IF ( ( SIZE ( TRIM ( DQAP_RANGE ),  1 )> 0 ) ) 
 CALL DQ_ADD_LINE ( CONCAT ( DQAP_STR ,  " " ,  DQAP_RANGE ,  " where" ))
SET  DQ_PARSER_REC -> PLAN_COUNT  = ( DQ_PARSER_REC -> PLAN_COUNT + 1 )
ELSE  
 CALL DQ_ADD_LINE ( "where " )
ENDIF


END ;Subroutine

SUBROUTINE   DQ_ADD_SET  ( DQAS_TO ,  DQAS_FROM  )

IF ( ( DQ_PARSER_REC -> SET_COUNT > 0 ) ) 
 CALL DQ_ADD_LINE ( CONCAT ( "," ,  DQAS_TO ,  " = " ,  DQAS_FROM ))
ELSE  
 CALL DQ_ADD_LINE ( CONCAT ( "set " ,  DQAS_TO ,  " = " ,  DQAS_FROM ))
ENDIF

SET  DQ_PARSER_REC -> SET_COUNT  = ( DQ_PARSER_REC -> SET_COUNT + 1 )

END ;Subroutine

SUBROUTINE   DQ_ADD_TABLE  ( DQAT_TABLE_NAME ,  DQAT_TABLE_ALIAS  )

DECLARE  DQAT_STR  =  VC  WITH  PRIVATE , NOCONSTANT ( " " )
IF ( ( DQ_PARSER_REC -> TABLE_COUNT > 0 ) ) 
SET  DQAT_STR  =  CONCAT ( " , " ,  DQAT_TABLE_NAME )
ELSE  
SET  DQAT_STR  =  CONCAT ( " from " ,  DQAT_TABLE_NAME )
ENDIF

IF ( ( SIZE ( TRIM ( DQAT_TABLE_ALIAS ),  1 )> 0 ) ) 
SET  DQAT_STR  =  CONCAT ( DQAT_STR ,  " " ,  DQAT_TABLE_ALIAS )
ENDIF

SET  DQ_PARSER_REC -> TABLE_COUNT  = ( DQ_PARSER_REC -> TABLE_COUNT + 1 )
 CALL DQ_ADD_LINE ( DQAT_STR )

END ;Subroutine

SUBROUTINE   DQ_ADD_WITH  ( DQAW_CONTROL_OPTION  )

IF ( ( DQ_PARSER_REC -> WITH_COUNT > 0 ) ) 
 CALL DQ_ADD_LINE ( CONCAT ( "," ,  DQAW_CONTROL_OPTION ))
ELSE  
 CALL DQ_ADD_LINE ( CONCAT ( "with " ,  DQAW_CONTROL_OPTION ))
ENDIF

SET  DQ_PARSER_REC -> WITH_COUNT  = ( DQ_PARSER_REC -> WITH_COUNT + 1 )

END ;Subroutine

SUBROUTINE   DQ_BEGIN_INSERT  ( DQBI_DUMMY  )

 CALL DQ_RESET_QUERY ( 1 )
 CALL DQ_ADD_LINE ( "insert" )

END ;Subroutine

SUBROUTINE   DQ_BEGIN_SELECT  ( DQBS_DISTINCT_IND ,  DQBS_OUTPUT_DEVICE  )

DECLARE  DQBS_STR  =  VC  WITH  NOCONSTANT ( " " )
 CALL DQ_RESET_QUERY ( 1 )
IF ( ( DQBS_DISTINCT_IND = 0 ) ) 
SET  DQBS_STR  =  "select" 
ELSE  
SET  DQBS_STR  =  "select distinct" 
ENDIF

IF ( ( SIZE ( TRIM ( DQBS_OUTPUT_DEVICE ),  1 )> 0 ) ) 
SET  DQBS_STR  =  CONCAT ( DQBS_STR ,  " into " ,  DQBS_OUTPUT_DEVICE )
ENDIF

 CALL DQ_ADD_LINE ( DQBS_STR )

END ;Subroutine

SUBROUTINE   DQ_BEGIN_UPDATE  ( DQBU_DUMMY  )

 CALL DQ_RESET_QUERY ( 1 )
 CALL DQ_ADD_LINE ( "update" )

END ;Subroutine

SUBROUTINE   DQ_ECHO_QUERY  ( DQEQ_LEVEL  )

DECLARE  DQEQ_I  =  I4  WITH  PRIVATE , NOCONSTANT ( 0 )
DECLARE  DQEQ_J  =  I4  WITH  PRIVATE , NOCONSTANT ( 0 )
IF ( ( DQEQ_LEVEL = 1 ) ) 
 CALL ECHO ( "-------------------------------------------------------------------" )
 CALL ECHO ( "Parser Buffer Echo:" )
 CALL ECHO ( "-------------------------------------------------------------------" )
FOR (  DQEQ_I  =  1  TO  DQ_PARSER_REC -> BUFFER_COUNT  )

 CALL ECHO ( DQ_PARSER_REC -> BUFFER [ DQEQ_I ]-> LINE )

ENDFOR

 CALL ECHO ( "-------------------------------------------------------------------" )
ELSEIF ( ( DQEQ_LEVEL = 2 ) ) 
IF ( ( VALIDATE ( REPLY -> DEBUG [ 1 ]-> LINE ,  "-9" )!= "-9" ) ) 
SET  DQEQ_J  =  SIZE ( REPLY -> DEBUG ,  5 )
SET  STAT  =  ALTERLIST ( REPLY -> DEBUG , (( DQEQ_J + SIZE ( DQ_PARSER_REC -> BUFFER ,  5 ))+ 4 ))
SET  REPLY -> DEBUG [( DQEQ_J + 1 )]-> LINE  = 
 "-------------------------------------------------------------------" 
SET  REPLY -> DEBUG [( DQEQ_J + 2 )]-> LINE  =  "Parser Buffer Echo:" 
SET  REPLY -> DEBUG [( DQEQ_J + 3 )]-> LINE  = 
 "-------------------------------------------------------------------" 
FOR (  DQEQ_I  =  1  TO  DQ_PARSER_REC -> BUFFER_COUNT  )

SET  REPLY -> DEBUG [(( DQEQ_J + DQEQ_I )+ 3 )]-> LINE  =  DQ_PARSER_REC -> BUFFER [ DQEQ_I ]->
 LINE 

ENDFOR

SET  REPLY -> DEBUG [(( DQEQ_J + DQ_PARSER_REC -> BUFFER_COUNT )+ 4 )]-> LINE  = 
 "-------------------------------------------------------------------" 
ENDIF

ENDIF


END ;Subroutine

SUBROUTINE   DQ_END_QUERY  ( DQES_DUMMY  )

 CALL DQ_ADD_LINE ( " go" )
SET  STAT  =  ALTERLIST ( DQ_PARSER_REC -> BUFFER ,  DQ_PARSER_REC -> BUFFER_COUNT )

END ;Subroutine

SUBROUTINE   DQ_EXECUTE  ( DQE_RESET  )

DECLARE  DQE_I  =  I4  WITH  PRIVATE , NOCONSTANT ( 0 )
FOR (  DQE_I  =  1  TO  DQ_PARSER_REC -> BUFFER_COUNT  )

 CALL PARSER ( DQ_PARSER_REC -> BUFFER [ DQE_I ]-> LINE ,  1 )

ENDFOR

IF ( ( DQE_RESET = 1 ) ) 
 CALL DQ_RESET_QUERY ( 1 )
ENDIF


END ;Subroutine

SUBROUTINE   DQ_RESET_QUERY  ( DQRB_DUMMY  )

SET  STAT  =  ALTERLIST ( DQ_PARSER_REC -> BUFFER ,  0 )
SET  DQ_PARSER_REC -> BUFFER_COUNT  =  0 
SET  DQ_PARSER_REC -> PLAN_COUNT  =  0 
SET  DQ_PARSER_REC -> SET_COUNT  =  0 
SET  DQ_PARSER_REC -> TABLE_COUNT  =  0 
SET  DQ_PARSER_REC -> WITH_COUNT  =  0 

END ;Subroutine

ENDIF


RECORD  EXPIRATIONRULES  (
 1  RULE_CNT  =  I4 
 1  QUAL [*] 
 2  RELTN_CD  =  F8 
 2  RULE_TYPE  =  C12 
 2  RULE_VALUE  =  I2 )

RECORD  EXPIRERELTNS  (
 1  RELTN_CNT  =  I4 
 1  QUAL [*] 
 2  RELTN_ID  =  F8 
 2  EXPIRE_DT_TM  =  DQ8 
 2  EXPIRE_FLAG  =  I4 )

RECORD  REPLY  (
 1  STATUS_DATA 
 2  STATUS  =  C1 
 2  SUBEVENTSTATUS [ 1 ] 
 3  OPERATIONNAME  =  C25 
 3  OPERATIONSTATUS  =  C1 
 3  TARGETOBJECTNAME  =  C25 
 3  TARGETOBJECTVALUE  =  VC )

DECLARE  LOADEXPIRATIONRULES ( NULL ) =  NULL 

DECLARE  SYNCHRONIZEEXPIREDT ( NULL ) =  I2 

DECLARE  EXPIRERELTNS ( NULL ) =  I2 

DECLARE  UPDATERELTNS ( NULL ) =  NULL 

DECLARE  VALIDATERULETYPE ( RULE ) =  I2 

DECLARE  EXPIREBEGDT (( RELTNCD = F8 ), ( MINS = I4 )) =  I2 

DECLARE  EXPIREADMITDT (( RELTNCD = F8 ), ( MINS = I4 )) =  I2 

DECLARE  EXPIREDISCHARGEDT (( RELTNCD = F8 ), ( MINS = I4 )) =  I2 

DECLARE  ENDOFDATETIME  =  DQ8  WITH  CONSTANT ( CNVTDATETIME ( "31-DEC-2100,00:00:00" ))

SUBROUTINE   LOADEXPIRATIONRULES  ( NULL  )

SET  EXPIRATIONRULES -> RULE_CNT  =  0 
SELECT  INTO  "nl:" 
FROM ( CODE_VALUE_EXTENSION  CVE )
 PLAN ( CVE 
WHERE (CVE.CODE_SET= 333 ) AND  (( (CVE.FIELD_NAME= "Expire Digit" ) )  OR  ((CVE.FIELD_NAME=
 "Expire Rule" ) )) )

ORDER BY CVE.CODE_VALUE

HEAD CVE.CODE_VALUE
 EXPIRATIONRULES -> RULE_CNT =( EXPIRATIONRULES -> RULE_CNT + 1 ),
IF ( ( MOD ( EXPIRATIONRULES -> RULE_CNT ,  20 )= 1 ) )  STAT = ALTERLIST ( EXPIRATIONRULES -> QUAL 
, ( EXPIRATIONRULES -> RULE_CNT + 19 ))
ENDIF
, EXPIRATIONRULES -> QUAL [ EXPIRATIONRULES -> RULE_CNT ]-> RELTN_CD =CVE.CODE_VALUE,
 EXPIRATIONRULES -> QUAL [ EXPIRATIONRULES -> RULE_CNT ]-> RULE_TYPE = "" , EXPIRATIONRULES -> QUAL 
[ EXPIRATIONRULES -> RULE_CNT ]-> RULE_VALUE = 0 
DETAIL 

IF ( (CVE.FIELD_NAME= "Expire Digit" ) )  EXPIRATIONRULES -> QUAL [ EXPIRATIONRULES -> RULE_CNT ]->
 RULE_VALUE = CNVTINT (CVE.FIELD_VALUE)
ELSEIF ( (CVE.FIELD_NAME= "Expire Rule" ) )  EXPIRATIONRULES -> QUAL [ EXPIRATIONRULES -> RULE_CNT ]
-> RULE_TYPE = TRIM (CVE.FIELD_VALUE)
ENDIF

FOOT  CVE.CODE_VALUE

IF (  (( ( EXPIRATIONRULES -> QUAL [ EXPIRATIONRULES -> RULE_CNT ]-> RULE_VALUE <= 0 ) )  OR  ((
 VALIDATERULETYPE ( EXPIRATIONRULES -> QUAL [ EXPIRATIONRULES -> RULE_CNT ]-> RULE_TYPE )= 0 ) )) 
 )  EXPIRATIONRULES -> RULE_CNT =( EXPIRATIONRULES -> RULE_CNT - 1 )
ENDIF

FOOT REPORT 
 STAT = ALTERLIST ( EXPIRATIONRULES -> QUAL ,  EXPIRATIONRULES -> RULE_CNT )
 WITH  NOCOUNTER 

END ;Subroutine


SUBROUTINE   EXPIRERELTNS  ( NULL  )

DECLARE  CONTINUE  =  I2  WITH  NOCONSTANT ( 0 ), PRIVATE 
DECLARE  Y  =  I4  WITH  NOCONSTANT 
FOR (  Y  =  1  TO  EXPIRATIONRULES -> RULE_CNT  )

CASE (  EXPIRATIONRULES -> QUAL [ Y ]-> RULE_TYPE  )
 OF  "DAYAFTEFF" : 
IF (  EXPIREBEGDT ( EXPIRATIONRULES -> QUAL [ Y ]-> RELTN_CD , (( EXPIRATIONRULES -> QUAL [ Y ]->
 RULE_VALUE * 24 )* 60 )) ) 
SET  CONTINUE  =  1 
ENDIF

 OF  "HRAFTEFF" : 
IF (  EXPIREBEGDT ( EXPIRATIONRULES -> QUAL [ Y ]-> RELTN_CD , ( EXPIRATIONRULES -> QUAL [ Y ]->
 RULE_VALUE * 60 )) ) 
SET  CONTINUE  =  1 
ENDIF

 OF  "DAYAFTADM" : 
IF (  EXPIREADMITDT ( EXPIRATIONRULES -> QUAL [ Y ]-> RELTN_CD , (( EXPIRATIONRULES -> QUAL [ Y ]->
 RULE_VALUE * 24 )* 60 )) ) 
SET  CONTINUE  =  1 
ENDIF

 OF  "HRAFTADM" : 
IF (  EXPIREADMITDT ( EXPIRATIONRULES -> QUAL [ Y ]-> RELTN_CD , ( EXPIRATIONRULES -> QUAL [ Y ]->
 RULE_VALUE * 60 )) ) 
SET  CONTINUE  =  1 
ENDIF

 OF  "DAYAFTDISCH" : 
IF (  EXPIREDISCHARGEDT ( EXPIRATIONRULES -> QUAL [ Y ]-> RELTN_CD , (( EXPIRATIONRULES -> QUAL [ Y 
]-> RULE_VALUE * 24 )* 60 )) ) 
SET  CONTINUE  =  1 
ENDIF

 OF  "HRAFTDISCH" : 
IF (  EXPIREDISCHARGEDT ( EXPIRATIONRULES -> QUAL [ Y ]-> RELTN_CD , ( EXPIRATIONRULES -> QUAL [ Y ]
-> RULE_VALUE * 24 )) ) 
SET  CONTINUE  =  1 
ENDIF

 ENDCASE 


ENDFOR
 RETURN ( CONTINUE )


END ;Subroutine


SUBROUTINE   SYNCHRONIZEEXPIREDT  ( NULL  )

DECLARE  RETVAL  =  I2  WITH  NOCONSTANT ( 0 ), PRIVATE 
SET  EXPIRERELTNS -> RELTN_CNT  =  0 
SET  STAT  =  ALTERLIST ( EXPIRERELTNS -> QUAL ,  5000 )
SELECT  INTO  "nl:" 
FROM ( ENCNTR_PRSNL_RELTN  EPR )
 PLAN ( EPR 
WHERE (EPR.EXPIRE_DT_TM> CNVTDATETIME ( CURDATE ,  CURTIME3 )) AND  (( (EPR.ACTIVE_IND= 0 ) )  OR  (
(EPR.END_EFFECTIVE_DT_TM<= CNVTDATETIME ( CURDATE ,  CURTIME3 )) )) )


DETAIL 
 EXPIRERELTNS -> RELTN_CNT =( EXPIRERELTNS -> RELTN_CNT + 1 ),
 EXPIRERELTNS -> QUAL [ EXPIRERELTNS -> RELTN_CNT ]-> RELTN_ID =EPR.ENCNTR_PRSNL_RELTN_ID,
 EXPIRERELTNS -> QUAL [ EXPIRERELTNS -> RELTN_CNT ]-> EXPIRE_DT_TM = NOW ,
 EXPIRERELTNS -> QUAL [ EXPIRERELTNS -> RELTN_CNT ]-> EXPIRE_FLAG = 1 
 WITH  NOCOUNTER , MAXQUAL ( EPR ,  5000 )
IF ( ( CURQUAL = 5000 ) ) 
SET  RETVAL  =  1 
ENDIF
 RETURN ( RETVAL )


END ;Subroutine


SUBROUTINE   UPDATERELTNS  ( NULL  )

SET  BCREATEREQ  =  CR_CREATEREQUEST ( 0 ,  101305 ,  "encntr_prsnl_req" )
SET  ENCNTR_PRSNL_REQ -> ENCNTR_PRSNL_RELTN_QUAL  =  EXPIRERELTNS -> RELTN_CNT 
SET  STAT  =  ALTERLIST ( ENCNTR_PRSNL_REQ -> ENCNTR_PRSNL_RELTN ,  ENCNTR_PRSNL_REQ ->
 ENCNTR_PRSNL_RELTN_QUAL )
SET  ACTION_BEGIN  =  1 
SET  ACTION_END  =  EXPIRERELTNS -> RELTN_CNT 
FOR (  X  =  1  TO  EXPIRERELTNS -> RELTN_CNT  )

SET  ENCNTR_PRSNL_REQ -> ENCNTR_PRSNL_RELTN [ X ]-> EXPIRE_DT_TM  =  CNVTDATETIME ( EXPIRERELTNS ->
 QUAL [ X ]-> EXPIRE_DT_TM )
SET  ENCNTR_PRSNL_REQ -> ENCNTR_PRSNL_RELTN [ X ]-> EXPIRATION_IND  =  EXPIRERELTNS -> QUAL [ X ]->
 EXPIRE_FLAG 
SET  ENCNTR_PRSNL_REQ -> ENCNTR_PRSNL_RELTN [ X ]-> EXPIRATION_IND_IND  =  TRUE 
SET  ENCNTR_PRSNL_REQ -> ENCNTR_PRSNL_RELTN [ X ]-> ENCNTR_PRSNL_RELTN_ID  =  EXPIRERELTNS -> QUAL [
 X ]-> RELTN_ID 
SET  ENCNTR_PRSNL_REQ -> ENCNTR_PRSNL_RELTN [ X ]-> FT_PRSNL_NAME  =  " " 

ENDFOR

FREE SET ENCNTR_PRSNL_REPLY 
RECORD  ENCNTR_PRSNL_REPLY  (
 1  ENCNTR_PRSNL_RELTN_QUAL  =  I2 
 1  ENCNTR_PRSNL_RELTN [*] 
 2  ENCNTR_PRSNL_RELTN_ID  =  F8 
 2  PM_HIST_TRACKING_ID  =  F8 
 1  STATUS_DATA 
 2  STATUS  =  C1 
 2  SUBEVENTSTATUS [ 1 ] 
 3  OPERATIONNAME  =  C25 
 3  OPERATIONSTATUS  =  C1 
 3  TARGETOBJECTNAME  =  C25 
 3  TARGETOBJECTVALUE  =  VC )
 EXECUTE PM_UPT_ENCNTR_PRSNL_RELTN WITH  REPLACE ( "REQUEST" ,  "ENCNTR_PRSNL_REQ" ),
 REPLACE ( "REPLY" ,  "ENCNTR_PRSNL_REPLY" )
IF ( ( ENCNTR_PRSNL_REPLY -> STATUS_DATA -> STATUS != "S" ) ) 
SET  REPLY -> STATUS_DATA -> STATUS  =  "F" 
ENDIF

COMMIT

END ;Subroutine


SUBROUTINE   VALIDATERULETYPE  ( RULE  )

DECLARE  RETVAL  =  I2  WITH  NOCONSTANT ( 0 ), PRIVATE 
CASE (  RULE  )
 OF  "DAYAFTADM" : 
 OF  "DAYAFTEFF" : 
 OF  "DAYAFTDISCH" : 
 OF  "HRAFTEFF" : 
 OF  "HRAFTADM" : 
 OF  "HRAFTDISCH" : 
SET  RETVAL  =  1 
 ENDCASE 
 RETURN ( RETVAL )


END ;Subroutine


SUBROUTINE   EXPIREBEGDT  ( RELTNCD ,  MINS  )

DECLARE  CONTINUE  =  I2  WITH  NOCONSTANT ( 0 ), PRIVATE 
DECLARE  RECCNT  =  I4  WITH  NOCONSTANT ( 0 )
SET  NOW  =  CNVTDATETIME ( CURDATE ,  CURTIME3 )
SET  COMP_DT  =  CNVTLOOKBEHIND ( BUILD ( MINS ,  " MIN" ),  NOW )
SET  EXPIRERELTNS -> RELTN_CNT  =  0 
SET  STAT  =  ALTERLIST ( EXPIRERELTNS -> QUAL ,  5000 )
SELECT  INTO  "nl:" 
FROM ( ENCNTR_PRSNL_RELTN  EPR )

WHERE (EPR.EXPIRATION_IND= 0 ) AND (EPR.ENCNTR_PRSNL_R_CD= RELTNCD ) AND  (( (
EPR.END_EFFECTIVE_DT_TM< CNVTDATETIME ( NOW )) )  OR  ((EPR.END_EFFECTIVE_DT_TM>= CNVTDATETIME (
 ENDOFDATETIME )) ))  AND (EPR.BEG_EFFECTIVE_DT_TM<= CNVTDATETIME ( COMP_DT ))

DETAIL 
 RECCNT =( RECCNT + 1 ),
 EXPIRERELTNS -> RELTN_CNT =( EXPIRERELTNS -> RELTN_CNT + 1 ),
 EXPIRERELTNS -> QUAL [ EXPIRERELTNS -> RELTN_CNT ]-> RELTN_ID =EPR.ENCNTR_PRSNL_RELTN_ID,
 EXPIRERELTNS -> QUAL [ EXPIRERELTNS -> RELTN_CNT ]-> EXPIRE_DT_TM = NOW ,
 EXPIRERELTNS -> QUAL [ EXPIRERELTNS -> RELTN_CNT ]-> EXPIRE_FLAG = 1 
 WITH  MAXQUAL ( EPR ,  5000 )
IF ( ( RECCNT = 5000 ) ) 
SET  CONTINUE  =  1 
ENDIF

 CALL UPDATERELTNS ( NULL ) RETURN ( CONTINUE )


END ;Subroutine


SUBROUTINE   EXPIREADMITDT  ( RELTNCD ,  MINS  )

DECLARE  CONTINUE  =  I2  WITH  NOCONSTANT ( 0 ), PRIVATE 
DECLARE  RECCNT  =  I4  WITH  NOCONSTANT ( 0 )
SET  NOW  =  CNVTDATETIME ( CURDATE ,  CURTIME3 )
SET  COMP_DT  =  CNVTLOOKBEHIND ( BUILD ( MINS ,  " MIN" ),  NOW )
SET  EXPIRERELTNS -> RELTN_CNT  =  0 
SET  STAT  =  ALTERLIST ( EXPIRERELTNS -> QUAL ,  5000 )
SELECT  INTO  "nl:" 
FROM ( ENCNTR_PRSNL_RELTN  EPR ),
( ENCOUNTER  E )
 PLAN ( EPR 
WHERE (EPR.EXPIRATION_IND= 0 ) AND (EPR.ENCNTR_PRSNL_R_CD= RELTNCD ) AND  (( (
EPR.END_EFFECTIVE_DT_TM< CNVTDATETIME ( NOW )) )  OR  ((EPR.END_EFFECTIVE_DT_TM>= CNVTDATETIME (
 ENDOFDATETIME )) )) )
 AND ( E 
WHERE (E.ENCNTR_ID=EPR.ENCNTR_ID) AND (E.REG_DT_TM<= CNVTDATETIME ( COMP_DT )))


DETAIL 
 RECCNT =( RECCNT + 1 ),
 EXPIRERELTNS -> RELTN_CNT =( EXPIRERELTNS -> RELTN_CNT + 1 ),
 EXPIRERELTNS -> QUAL [ EXPIRERELTNS -> RELTN_CNT ]-> RELTN_ID =EPR.ENCNTR_PRSNL_RELTN_ID,
 EXPIRERELTNS -> QUAL [ EXPIRERELTNS -> RELTN_CNT ]-> EXPIRE_DT_TM = NOW ,
 EXPIRERELTNS -> QUAL [ EXPIRERELTNS -> RELTN_CNT ]-> EXPIRE_FLAG = 1 
FOOT REPORT 
 STAT = ALTERLIST ( EXPIRERELTNS -> QUAL ,  EXPIRERELTNS -> RELTN_CNT )
 WITH  NOCOUNTER , MAXQUAL ( EPR ,  5000 )
IF ( ( RECCNT = 5000 ) ) 
SET  CONTINUE  =  1 
ENDIF

 CALL UPDATERELTNS ( NULL ) RETURN ( CONTINUE )


END ;Subroutine


SUBROUTINE   EXPIREDISCHARGEDT  ( RELTNCD ,  MINS  )

DECLARE  CONTINUE  =  I2  WITH  NOCONSTANT ( 0 ), PRIVATE 
DECLARE  RECCNT  =  I4  WITH  NOCONSTANT ( 0 )
SET  NOW  =  CNVTDATETIME ( CURDATE ,  CURTIME3 )
SET  COMP_DT  =  CNVTLOOKBEHIND ( BUILD ( MINS ,  " MIN" ),  NOW )
SET  EXPIRERELTNS -> RELTN_CNT  =  0 
SELECT  INTO  "nl:" 
FROM ( ENCNTR_PRSNL_RELTN  EPR ),
( ENCOUNTER  E )
 P( ENCOUNTER  E )
 PLAN ( EPR 
WHERE (EPR.EXPIRATION_IND= 0 ) AND (EPR.ENCNTR_PRSNL_R_CD= RELTNCD ) AND  (( (
EPR.END_EFFECTIVE_DT_TM< CNVTDATETIME ( NOW )) )  OR  ((EPR.END_EFFECTIVE_DT_TM>= CNVTDATETIME (
 ENDOFDATETIME )) )) )
 AND ( E 
WHERE (E.ENCNTR_ID=EPR.ENCNTR_ID) AND (E.DISCH_DT_TM<= CNVTDATETIME ( COMP_DT )))


DETAIL 
 RECCNT =( RECCNT + 1 ),
 EXPIRERELTNS -> RELTN_CNT =( EXPIRERELTNS -> RELTN_CNT + 1 ),

IF ( ( MOD ( EXPIRERELTNS -> RELTN_CNT ,  100 )= 1 ) )  STAT = ALTERLIST ( EXPIRERELTNS -> QUAL , (
 EXPIRERELTNS -> RELTN_CNT + 99 ))
ENDIF
,
 EXPIRERELTNS -> QUAL [ EXPIRERELTNS -> RELTN_CNT ]-> RELTN_ID =EPR.ENCNTR_PRSNL_RELTN_ID,
 EXPIRERELTNS -> QUAL [ EXPIRERELTNS -> RELTN_CNT ]-> EXPIRE_DT_TM = NOW ,
 EXPIRERELTNS -> QUAL [ EXPIRERELTNS -> RELTN_CNT ]-> EXPIRE_FLAG = 1 
FOOT REPORT 
 STAT = ALTERLIST ( EXPIRERELTNS -> QUAL ,  EXPIRERELTNS -> RELTN_CNT )
 WITH  NOCOUNTER , MAXQUAL ( EPR ,  5000 )
IF ( ( RECCNT = 5000 ) ) 
SET  CONTINUE  =  1 
ENDIF

 CALL UPDATERELTNS ( NULL ) RETURN ( CONTINUE )


END ;Subroutine


DECLARE  PATID  =  F8  WITH  NOCONSTANT ( 1.0 )

RECORD  REPLY  (
 1  STATUS_DATA 
 2  STATUS  =  C1 
 2  SUBEVENTSTATUS [ 1 ] 
 3  OPERATIONNAME  =  C25 
 3  OPERATIONSTATUS  =  C1 
 3  TARGETOBJECTNAME  =  C25 
 3  TARGETOBJECTVALUE  =  VC )

 CALL LOADEXPIRATIONRULES ( NULL )

WHILE ( ( PATID > 0 ))

SET  PATID  =  EXPIRERELTNS ( PATID )

ENDWHILE
